How did viewing a diff between two versions of a file help you see the bug that was introduced?
	- By comparing the two versions of the file we could spot the typo that was introduced in the new version of the file that start causing the bug.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	- It would be easier to compare the current version of a file with previous ones.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	- Pros: you don't get to have too many versions of a file, some of which does not even compile
	- Cons: if you do not commit your code and something bad happens with your computer you might loose your last version of the code. With auto-save this isn't likely to happen.

Reflect: Multi-File Commits
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	- With Google Docs you treat files individually. Git on the other hand allows you to commit logical changes of a repository, where a logical change might be made of changes in multiple files. For example if you have a repository containing one web project and you want to add a new feature to it, then if you had to change more than one file you can commit all the changes at once and add a comment that would allow you to identify the addition of the new feature. This way you can track more easily what were the changes added by the new feature.

Reflect: Using Git to View History
How can you use the commands git log and git diff to view the history of the files?

	- git log shows all the commits, starting with the last one and git diff can be used to compare the changes between two commits.

Reflect: Confidence from Version Control
How might using version control make you more confident to make changes that could break something?

	- If you use version control you can always switch to a previous version. Hence if you make a commit that breaks something you can always compare it with the previous commits and identify the erroneous changes and either make a new commit with a fix or completely come back to a previous version.

Reflect: How do you want to use Git?
Now that you have your workspace set up, what do you want to try using Git for?

	- I would use Git for adding version control to my personal and work projects.
